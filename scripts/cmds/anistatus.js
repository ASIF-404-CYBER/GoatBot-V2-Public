const axios = require('axios'); let sentVideos = []; const animeUserIds = [ '6850681469859628034', '7184871063795352603', '6957010568603829254', ]; module.exports = { config: { name: "anistatus", aliases: ["animestatus", "as"], author: "Kshitiz", version: "1.0", shortDescription: { en: "Get a random anime status update", }, longDescription: { en: "Get a random anime status update from a specified Anime user.", }, category: "anime", guide: { en: "{p}{n}", }, }, onStart: async function ({ api, event }) { const randomUserId = animeUserIds[Math.floor(Math.random() * animeUserIds.length)]; api.setMessageReaction('🕐', event.messageID, () => {}, true); const videos = await fetchAnimeUserVideos(randomUserId); if (!videos || videos.length === 0) { api.sendMessage({ body: 'No anime status videos found.' }, event.threadID); return; } const remainingVideos = videos.filter(video => !sentVideos.includes(video.video_id)); if (remainingVideos.length === 0) { sentVideos = []; } const randomVideo = remainingVideos[Math.floor(Math.random() * remainingVideos.length)]; await sendVideo(api, event.threadID, randomVideo, event.messageID); sentVideos.push(randomVideo.video_id); }, }; async function fetchAnimeUserVideos(userId) { const options = { method: 'GET', url: 'https://tiktok-scraper7.p.rapidapi.com/user/posts', params: { user_id: userId, count: '300', }, headers: { 'X-RapidAPI-Key': '0820ec24afmsh10d1bef860c3651p10e3f6jsn715a93754ace', 'X-RapidAPI-Host': 'tiktok-scraper7.p.rapidapi.com', }, }; try { const response = await axios.request(options); return response.data.data.videos; } catch (error) { console.error(error); return null; } } async function sendVideo(api, threadID, video, messageID) { if (!video) { api.sendMessage({ body: 'Error: Video not found.' }, threadID); return; } const videoUrl = video.play; if (!videoUrl) { api.sendMessage({ body: 'Error: Video URL not found.' }, threadID); return; } try { const videoStream = await getStreamFromURL(videoUrl); await api.sendMessage({ body: `Here is your Anime Status:`, attachment: videoStream, }, threadID, messageID); } catch (error) { console.error(error); api.sendMessage({ body: 'An error occurred while sending the video.\nPlease try again later.' }, threadID); } } async function getStreamFromURL(url) { const response = await axios.get(url, { responseType: 'stream' }); return response.data; }